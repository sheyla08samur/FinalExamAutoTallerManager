// <auto-generated />
using System;
using AutoTallerManager.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutoTallerManager.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auditoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("auditoria_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccionId")
                        .HasColumnType("integer")
                        .HasColumnName("accion_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescripcionAccion")
                        .HasColumnType("TEXT")
                        .HasColumnName("descripcion_accion");

                    b.Property<string>("EntidadAfectada")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entidad_afectada");

                    b.Property<DateTime>("FechaHora")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_hora")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_auditoria");

                    b.HasIndex("AccionId")
                        .HasDatabaseName("ix_auditoria_accion_id");

                    b.HasIndex("FechaHora")
                        .HasDatabaseName("ix_auditoria_fecha_hora");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_auditoria_usuario_id");

                    b.ToTable("auditorias", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.EstadoUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreEstUsu")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nombre_est_usu");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_estados_usuario");

                    b.ToTable("estados_usuario");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime>("Expiries")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiries");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_refresh_tokens");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descripcion");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre_rol");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_roles");

                    b.ToTable("rols", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.UserMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("p_k_users_members");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users_members", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.UserMemberRol", b =>
                {
                    b.Property<int>("UserMemberId")
                        .HasColumnType("integer")
                        .HasColumnName("user_member_id");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.HasKey("UserMemberId", "RolId")
                        .HasName("pk_user_member_rol");

                    b.HasIndex("RolId")
                        .HasDatabaseName("ix_user_member_rol_rol_id");

                    b.HasIndex("UserMemberId")
                        .HasDatabaseName("ix_user_member_rol_user_member_id");

                    b.ToTable("user_member_roles", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("categoriaid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreCat")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_cat");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_categorias");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Departamento_Id")
                        .HasColumnType("integer")
                        .HasColumnName("departamento_id");

                    b.Property<string>("Nombre")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_ciudad");

                    b.HasIndex("Departamento_Id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DireccionId")
                        .HasColumnType("integer");

                    b.Property<int>("Direccion_Id")
                        .HasColumnType("integer")
                        .HasColumnName("direccion_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre_completo");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefono");

                    b.Property<int>("TipoClienteId")
                        .HasColumnType("integer");

                    b.Property<int>("TipoCliente_Id")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_cliente_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cliente");

                    b.HasIndex("DireccionId");

                    b.HasIndex("Direccion_Id");

                    b.HasIndex("TipoClienteId");

                    b.HasIndex("TipoCliente_Id");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre");

                    b.Property<int>("PaisId")
                        .HasColumnType("integer")
                        .HasColumnName("pais_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_departamento");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("ix_departamento_nombre");

                    b.HasIndex("PaisId")
                        .HasDatabaseName("ix_departamento_pais_id");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.DetalleOrden", b =>
                {
                    b.Property<int>("DetalleOrdenId")
                        .HasColumnType("integer")
                        .HasColumnName("detalle_orden_id");

                    b.Property<int>("OrdenServicioId")
                        .HasColumnType("integer")
                        .HasColumnName("orden_servicio_id");

                    b.Property<int>("Cantidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("cantidad");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<decimal>("PrecioManoDeObra")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("precio_mano_de_obra");

                    b.Property<decimal>("PrecioUnitario")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("precio_unitario");

                    b.Property<int?>("RepuestoId")
                        .HasColumnType("integer")
                        .HasColumnName("repuesto_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("DetalleOrdenId", "OrdenServicioId")
                        .HasName("pk_order_detail");

                    b.HasIndex("OrdenServicioId")
                        .HasDatabaseName("ix_order_detail_orden_servicio_id");

                    b.HasIndex("RepuestoId")
                        .HasDatabaseName("ix_order_detail_repuesto_id");

                    b.ToTable("orders_details", null, t =>
                        {
                            t.HasCheckConstraint("ck_order_detail_cantidad", "cantidad > 0");

                            t.HasCheckConstraint("ck_order_detail_mano", "precio_mano_de_obra >= 0");

                            t.HasCheckConstraint("ck_order_detail_pu", "precio_unitario >= 0");
                        });
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CiudadId")
                        .HasColumnType("integer")
                        .HasColumnName("ciudad_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_direccion");

                    b.HasIndex("CiudadId")
                        .HasDatabaseName("i_x_direcciones_ciudad_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.EstadoServ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreEstServ")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("nombre_est_serv");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_estados_servicio");

                    b.ToTable("services_status", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Fabricante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fabricanteid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("email");

                    b.Property<string>("NombreFab")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombrefab");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("telefono");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_fabricantes");

                    b.ToTable("manufacturer", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("factura_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date")
                        .HasColumnName("fecha");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("numero_factura");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text")
                        .HasColumnName("observaciones");

                    b.Property<int>("OrdenServicioId")
                        .HasColumnType("integer")
                        .HasColumnName("orden_servicio_id");

                    b.Property<int>("TipoPagoId")
                        .HasColumnType("integer")
                        .HasColumnName("pago_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_facturas");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("i_x_facturas_cliente_id");

                    b.HasIndex("OrdenServicioId")
                        .HasDatabaseName("i_x_facturas_orden_servicio_id");

                    b.HasIndex("TipoPagoId")
                        .HasDatabaseName("i_x_facturas_tipo_pago_id");

                    b.ToTable("bills", null, t =>
                        {
                            t.HasCheckConstraint("CK_Factura_Total_Positive", "total >= 0");
                        });
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.MarcaVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_marca_vehiculo");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("ix_marca_vehiculo_nombre");

                    b.ToTable("vehicle_brands", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.ModeloVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_modelo_vehiculo");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.OrdenServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("orden_servicio_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DescripcionTrabajo")
                        .HasColumnType("text")
                        .HasColumnName("descripcion_trabajo");

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_id");

                    b.Property<DateTime>("FechaEstimadaEntrega")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_estimada_entrega");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("DATE")
                        .HasColumnName("fecha_ingreso");

                    b.Property<int>("MecanicoId")
                        .HasColumnType("integer")
                        .HasColumnName("mecanico_id");

                    b.Property<int>("TipoServId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_serv_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("VehiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("vehiculo_id");

                    b.HasKey("Id")
                        .HasName("pk_orden_servicio");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("ix_orden_servicio_estado_id");

                    b.HasIndex("FechaIngreso")
                        .HasDatabaseName("ix_orden_servicio_fecha_ingreso");

                    b.HasIndex("MecanicoId")
                        .HasDatabaseName("i_x_ordenes_servicio_mecanico_id");

                    b.HasIndex("TipoServId");

                    b.HasIndex("VehiculoId")
                        .HasDatabaseName("i_x_ordenes_servicio_vehiculo_id");

                    b.ToTable("ordenes_servicio", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_pais");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("ix_pais_nombre");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Repuesto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("repuesto_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("integer")
                        .HasColumnName("categoria_id");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("codigo");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("descripcion");

                    b.Property<int>("FabricanteId")
                        .HasColumnType("integer")
                        .HasColumnName("fabricante_id");

                    b.Property<string>("NombreRepu")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("nombre_rep");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_vehiculo_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_repuestos");

                    b.HasIndex("CategoriaId")
                        .HasDatabaseName("i_x_repuestos_categoria_id");

                    b.HasIndex("FabricanteId")
                        .HasDatabaseName("i_x_repuestos_fabricante_id");

                    b.HasIndex("TipoVehiculoId")
                        .HasDatabaseName("i_x_repuestos_tipo_vehiculo_id");

                    b.ToTable("replacement", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoAccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreAccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_accion");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tipo_accion");

                    b.HasIndex("NombreAccion")
                        .HasDatabaseName("ix_tipo_accion_nombre_accion");

                    b.ToTable("types_actions", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tipo_cliente");

                    b.HasIndex("Nombre")
                        .HasDatabaseName("ix_tipo_cliente_nombre");

                    b.ToTable("customers_types", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tipo_pago_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreTipoPag")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_tipo_pag");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_tipos_pago");

                    b.ToTable("payment_types", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tipo_servid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreTipoServ")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_tipo_serv");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_tipos_servicio");

                    b.ToTable("service_types", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("tipo_vehiculo_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NombreTipoVehiculo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre_tipo_vehiculo");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_tipos_vehiculo");

                    b.ToTable("vehicle_types", (string)null);
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EstadoUsuarioId")
                        .HasColumnType("integer")
                        .HasColumnName("estado_usuario_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("RolId")
                        .HasColumnType("integer")
                        .HasColumnName("rol_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_usuarios");

                    b.HasIndex("EstadoUsuarioId")
                        .HasDatabaseName("i_x_usuarios_estado_usuario_id");

                    b.HasIndex("RolId")
                        .HasDatabaseName("i_x_usuarios_rol_id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Anio")
                        .HasColumnType("integer")
                        .HasColumnName("anio");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer")
                        .HasColumnName("cliente_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Kilometraje")
                        .HasColumnType("integer")
                        .HasColumnName("kilometraje");

                    b.Property<int>("MarcaVehiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("marca_vehiculo_id");

                    b.Property<int>("ModeloVehiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("modelo_vehiculo_id");

                    b.Property<string>("Placa")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("placa");

                    b.Property<int>("TipoVehiculoId")
                        .HasColumnType("integer")
                        .HasColumnName("tipo_vehiculo_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("p_k_vehiculos");

                    b.HasIndex("ClienteId")
                        .HasDatabaseName("i_x_vehiculos_cliente_id");

                    b.HasIndex("MarcaVehiculoId")
                        .HasDatabaseName("i_x_vehiculos_marca_vehiculo_id");

                    b.HasIndex("ModeloVehiculoId")
                        .HasDatabaseName("i_x_vehiculos_modelo_vehiculo_id");

                    b.HasIndex("Placa")
                        .IsUnique();

                    b.HasIndex("TipoVehiculoId")
                        .HasDatabaseName("i_x_vehiculos_tipo_vehiculo_id");

                    b.HasIndex("VIN")
                        .IsUnique();

                    b.ToTable("vehiculos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Vehiculo_Anio", "anio >= 1900 AND anio <= 2030");

                            t.HasCheckConstraint("CK_Vehiculo_Kilometraje", "kilometraje >= 0");
                        });
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auditoria", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.TipoAccion", "TipoAccion")
                        .WithMany()
                        .HasForeignKey("AccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_auditoria_tipo_accion");

                    b.HasOne("AutoTallerManager.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Auditorias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_auditoria_usuario");

                    b.Navigation("TipoAccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.RefreshToken", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Auth.UserMember", "UserMember")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_user_member");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.UserMemberRol", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Auth.Rol", "Rol")
                        .WithMany("UserMemberRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_member_rol_rol");

                    b.HasOne("AutoTallerManager.Domain.Entities.Auth.UserMember", "UserMember")
                        .WithMany("UserMemberRoles")
                        .HasForeignKey("UserMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_member_rol_user_member");

                    b.Navigation("Rol");

                    b.Navigation("UserMember");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Ciudad", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("Departamento_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_ciudad_departamento");

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("DireccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.Direccion", null)
                        .WithMany("Clientes")
                        .HasForeignKey("Direccion_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_direccion");

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoCliente", "TipoCliente")
                        .WithMany()
                        .HasForeignKey("TipoClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoCliente", null)
                        .WithMany("Clientes")
                        .HasForeignKey("TipoCliente_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cliente_tipo_cliente");

                    b.Navigation("Direccion");

                    b.Navigation("TipoCliente");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Departamento", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_departamento_pais");

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.DetalleOrden", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.OrdenServicio", "OrdenServicio")
                        .WithMany("DetallesOrden")
                        .HasForeignKey("OrdenServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_detalle");

                    b.HasOne("AutoTallerManager.Domain.Entities.Repuesto", "Repuesto")
                        .WithMany("DetallesOrden")
                        .HasForeignKey("RepuestoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_order_detail_repuesto");

                    b.Navigation("OrdenServicio");

                    b.Navigation("Repuesto");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Direccion", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Ciudad", "Ciudad")
                        .WithMany("Direcciones")
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_direccion_ciudad");

                    b.Navigation("Ciudad");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Factura", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.OrdenServicio", "OrdenServicio")
                        .WithMany("Facturas")
                        .HasForeignKey("OrdenServicioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_factura");

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoPago", "TipoPago")
                        .WithMany("Facturas")
                        .HasForeignKey("TipoPagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("OrdenServicio");

                    b.Navigation("TipoPago");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.OrdenServicio", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.EstadoServ", "Estado")
                        .WithMany("OrdenesServicio")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_estado");

                    b.HasOne("AutoTallerManager.Domain.Entities.Usuario", "Mecanico")
                        .WithMany("OrdenesServicio")
                        .HasForeignKey("MecanicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_mecanico");

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoServicio", "TipoServicio")
                        .WithMany("OrdenesServicio")
                        .HasForeignKey("TipoServId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_tipo_servicio");

                    b.HasOne("AutoTallerManager.Domain.Entities.Vehiculo", "Vehiculo")
                        .WithMany("OrdenesServicio")
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orden_servicio_vehiculo");

                    b.Navigation("Estado");

                    b.Navigation("Mecanico");

                    b.Navigation("TipoServicio");

                    b.Navigation("Vehiculo");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Repuesto", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Categoria", "Categoria")
                        .WithMany("Repuestos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.Fabricante", "Fabricante")
                        .WithMany("Repuestos")
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoVehiculo", "TipoVehiculo")
                        .WithMany("Repuestos")
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Fabricante");

                    b.Navigation("TipoVehiculo");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Usuario", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Auth.EstadoUsuario", "EstadoUsuario")
                        .WithMany("Usuarios")
                        .HasForeignKey("EstadoUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoTallerManager.Domain.Entities.Auth.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoUsuario");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Vehiculo", b =>
                {
                    b.HasOne("AutoTallerManager.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_Clientes_ClienteId");

                    b.HasOne("AutoTallerManager.Domain.Entities.MarcaVehiculo", "MarcaVehiculo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("MarcaVehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_MarcasVehiculo_MarcaVehiculoId");

                    b.HasOne("AutoTallerManager.Domain.Entities.ModeloVehiculo", "ModeloVehiculo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("ModeloVehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_ModelosVehiculo_ModeloVehiculoId");

                    b.HasOne("AutoTallerManager.Domain.Entities.TipoVehiculo", "TipoVehiculo")
                        .WithMany("Vehiculos")
                        .HasForeignKey("TipoVehiculoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Vehiculos_TiposVehiculo_TipoVehiculoId");

                    b.Navigation("Cliente");

                    b.Navigation("MarcaVehiculo");

                    b.Navigation("ModeloVehiculo");

                    b.Navigation("TipoVehiculo");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.EstadoUsuario", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.Rol", b =>
                {
                    b.Navigation("UserMemberRoles");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Auth.UserMember", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserMemberRoles");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Categoria", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Facturas");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Direccion", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.EstadoServ", b =>
                {
                    b.Navigation("OrdenesServicio");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Fabricante", b =>
                {
                    b.Navigation("Repuestos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.MarcaVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.ModeloVehiculo", b =>
                {
                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.OrdenServicio", b =>
                {
                    b.Navigation("DetallesOrden");

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Repuesto", b =>
                {
                    b.Navigation("DetallesOrden");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoCliente", b =>
                {
                    b.Navigation("Clientes");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoPago", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoServicio", b =>
                {
                    b.Navigation("OrdenesServicio");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.TipoVehiculo", b =>
                {
                    b.Navigation("Repuestos");

                    b.Navigation("Vehiculos");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Auditorias");

                    b.Navigation("OrdenesServicio");
                });

            modelBuilder.Entity("AutoTallerManager.Domain.Entities.Vehiculo", b =>
                {
                    b.Navigation("OrdenesServicio");
                });
#pragma warning restore 612, 618
        }
    }
}
